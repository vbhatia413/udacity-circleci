version: 2.1

orbs:
  slack: circleci/slack@4.2.1
commands:
  destroy-environment:
    description: Cleanup back-end and front-end cloudformation stacks given a workflow ID.
    steps:
      - run:
          name: Destroy environment on failure
          when: on_fail
          command: |
            # Delete files from bucket
            aws s3 rm s3://udapeople-${CIRCLE_WORKFLOW_ID}/ --recursive
            # Delete front end stack
            aws cloudformation delete-stack --stack-name vikas-udacity-frontend-${CIRCLE_WORKFLOW_ID}
            # Delete back end stack
            aws cloudformation delete-stack --stack-name vikas-udacity-backend-${CIRCLE_WORKFLOW_ID}
  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      # Add parameter here     
    steps:
      - run:
          name: Revert migrations on failure
          # Add when this will run
          when: on_fail
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            MIGRATION_RESULT=$(curl -H "token: migration_${CIRCLE_WORKFLOW_ID}" --request GET https://api.memstash.io/values/migration_result)
            if(( ${MIGRATION_RESULT}==1 )); 
            then
              cd ~/project/backend
              npm install
              npm run migrations:revert
            fi
            
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys:
            - frontend-build-{{ checksum "package-lock.json" }}
      - run:
          name: Build front-end
          command: |
            # Your code here
            cd frontend
            npm i
            npm run build
      - slack/notify:
          event: fail
          template: basic_fail_1
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build-{{ checksum "package-lock.json" }}

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys:
            - backend-build-${CIRCLE_WORKFLOW_ID}
      - run:
          name: Back-end build
          command: |
             # Your code here
             cd backend
             npm i
             npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build-${CIRCLE_WORKFLOW_ID}
  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys:
            - frontend-build-{{ checksum "package-lock.json" }}
      - run:
          name: front-end test
          command: |
             # Your code here
             cd frontend
             npm run test
                
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end test
          command: |
             # Your code here
             cd backend
             npm run test
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys:
            - frontend-build-{{ checksum "package-lock.json" }}
      - run:
          name: Scan front end dependencies
          command: |
             # Your code here
             cd frontend
             npm audit --audit-level=critical

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Scan backend dependencies
          command: |
             # Your code here
             cd backend
             npm audit --audit-level=critical
  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=vikasudacityproject \
              --stack-name "vikas-udacity-backend-${CIRCLE_WORKFLOW_ID}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID}"  
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=vikasudacityproject \
              --stack-name "vikas-udacity-frontend-${CIRCLE_WORKFLOW_ID}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID}" 
      - run:
          name: Add back-end ip to ansible inventory, use memstash
          command: |
            INSTANCE_IP=$(aws ec2 describe-instances \
            --filters 'Name=tag:Name,Values=backend-*' \
            --query "Reservations[*].Instances[*].PublicIpAddress" \
            --output text)
            echo ${INSTANCE_IP}
            curl -H "Content-Type: text/plain" \
               -H "token: ${CIRCLE_WORKFLOW_ID}" \
               --request PUT \
               --data ${INSTANCE_IP} \
               https://api.memstash.io/values/instance_ip
      # Here's some code to rollback on failure
      - destroy-environment
  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["f5:cc:de:2b:33:1d:f5:14:4e:bc:b1:fd:d2:35:58:47"]
      - run:
          name: Install dependencies
          command: |
            apk add --no-cache curl
            apk add --no-cache --upgrade bash
            apk add --no-cache --update ansible
            apk add --no-cache openssh-client
      - run:
          name: Configure server
          command: |
            echo ENVIRONMENT=production > "backend/.env"
            echo TYPEORM_CONNECTION=postgres >> "backend/.env"
            echo TYPEORM_MIGRATIONS_DIR=./src/migrations >> "backend/.env"
            echo TYPEORM_ENTITIES=./src/modules/domain/**/*.entity.ts >> "backend/.env"
            echo TYPEORM_MIGRATIONS=./src/migrations/*.ts >> "backend/.env"
            echo TYPEORM_HOST=udacity-database-2.c8zmhuumyb6c.us-west-2.rds.amazonaws.com >> "backend/.env"
            echo TYPEORM_PORT=5432 >> "backend/.env"
            echo TYPEORM_USERNAME=postgres >> "backend/.env"
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> "backend/.env"
            echo TYPEORM_DATABASE=udacity_database_postgres >> "backend/.env"
            INSTANCE_IP=$(curl -H "token: ${CIRCLE_WORKFLOW_ID}" --request GET https://api.memstash.io/values/instance_ip)
            echo ${INSTANCE_IP}
            cd .circleci/ansible/
            ls
            echo ${INSTANCE_IP} >> ./inventory.txt
            cat ./inventory.txt
            export ANSIBLE_HOST_KEY_CHECKING=false
            ansible-playbook -i ./inventory.txt configure-server.yml
      - destroy-environment
  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      - restore_cache:
          keys: backend-build-${CIRCLE_WORKFLOW_ID}
      - run:
          name: Run migrations
          command: |
            cd backend
            npm run migrations > migrationOutput.txt
            cat migrationOutput.txt
          no_output_timeout: 20m
      - run:
          name: Send migration results to memstash
          command: |
            cd backend
            echo grep -c "has been executed successfully" migrationOutput.txt
            MIGRATION_RESULT=`grep -c "has been executed successfully" migrationOutput.txt`
            echo $MIGRATION_RESULT
            curl -H "Content-Type: text/plain" \
               -H "token: migration_${CIRCLE_WORKFLOW_ID}" \
               --request PUT \
               --data ${MIGRATION_RESULT} \
               https://api.memstash.io/values/migration_result
            MIGRATION_TEST_RESPONSE=$(curl -H "token: migration_${CIRCLE_WORKFLOW_ID}" --request GET https://api.memstash.io/values/migration_result)
            echo "memstash test migration result"
            echo ${MIGRATION_TEST_RESPONSE}
      - destroy-environment      

  deploy-frontend:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            apk add curl
            apk add --update npm
            pip3 install awscli
      - run:
          name: Get backend url
          command: |
            PUBLIC_IP=$(curl -H "token: ${CIRCLE_WORKFLOW_ID}" --request GET https://api.memstash.io/values/instance_ip)
            echo "this is the ip being pulled:"
            echo $PUBLIC_IP
            echo "here is the api_url being set:"
            echo "https://$PUBLIC_IP:3000"
            export API_URL="https://$PUBLIC_IP:3000"
            cd frontend
            npm install
            npm run build
      - run:
          name: Deploy frontend objects
          command: |
            aws s3 cp ./frontend/dist s3://udapeople-${CIRCLE_WORKFLOW_ID}/ --recursive
      - destroy-environment  
      - revert-migrations      
                    
  deploy-backend:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      # Add ssh keys with fingerprint
      - add_ssh_keys:
          fingerprints: ["f5:cc:de:2b:33:1d:f5:14:4e:bc:b1:fd:d2:35:58:47"]
      - attach_workspace:
          at: ~/  
      - run:
          name: Install dependencies
          command: |
            apk add ansible
            apk add curl
            pip3 install awscli
      - run:
          name: Deploy backend
          no_output_timeout: 15m
          command: |
            INSTANCE_IP=$(curl -H "token: ${CIRCLE_WORKFLOW_ID}" --request GET https://api.memstash.io/values/instance_ip)
            echo ${INSTANCE_IP}
            cd .circleci/ansible/
            echo ${INSTANCE_IP} >> ./inventory.txt
            cat ./inventory.txt
            # cd /root/project/
            ls
            pwd
            cd ../..
            pwd
            echo ENVIRONMENT=production >> "backend/.env"
            echo TYPEORM_CONNECTION=postgres >> "backend/.env"
            echo TYPEORM_MIGRATIONS_DIR=./src/migrations >> "backend/.env"
            echo TYPEORM_ENTITIES=./src/modules/domain/**/*.entity.ts >> "backend/.env"
            echo TYPEORM_MIGRATIONS=./src/migrations/*.ts >> "backend/.env"
            echo TYPEORM_HOST=$TYPEORM_HOST >> "backend/.env"
            echo TYPEORM_PORT=$TYPEORM_PORT >> "backend/.env"
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> "backend/.env"
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> "backend/.env"
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> "backend/.env"
            
            tar -C backend -czvf artifact.tar.gz .
            cp -p artifact.tar.gz ~/project/backend/artifact.tar.gz
            ls -ltr
            pwd
            cat ~/project/.circleci/ansible/inventory.txt
            ansible-playbook ~/project/.circleci/ansible/deploy-backend.yml -i ~/project/.circleci/ansible/inventory.txt
      - destroy-environment  
      - revert-migrations
  smoke-test:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            apk add curl
            apk add ansible
            pip3 install awscli
      - run:
          name: Get backend url
          command: |
            PUBLIC_IP=$(curl -H "token: ${CIRCLE_WORKFLOW_ID}" --request GET https://api.memstash.io/values/instance_ip)
            export API_URL="https://${PUBLIC_IP}:3000/api/status"
            echo "API URL:${API_URL}"
      - run:
          name: Backend smoke test.
          command: |
            if curl -s "${API_URL}" | grep "ok"
            then
              return 0
            else
              return 1
            fi
      - run:
          name: Frontend smoke test.
          command: |
            FRONTEND_URL="http://udapeople-${CIRCLE_WORKFLOW_ID}.s3-website.us-west-2.amazonaws.com/#/"
            if curl -s ${FRONTEND_URL} | grep "Welcome"
            then
              return 0
            else
              return 1
            fi
      - destroy-environment  
      - revert-migrations
  
workflows:
  default:
    jobs:
      - build-frontend:
          context: VikasContext
      - build-backend
      # - test-frontend:
      #     requires: [build-frontend]
      # - test-backend:
      #     requires: [build-backend]
      # - scan-backend:
      #     requires: [test-backend]
      # - scan-frontend:
      #     requires: [test-frontend]
      - deploy-infrastructure:
          requires: [build-frontend, build-backend]
          #[test-frontend, test-backend, scan-frontend, scan-backend]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      #- run-migrations:
       #   requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [configure-infrastructure]
      - deploy-backend:
          requires: [configure-infrastructure]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
          #filters:
           # branches:
             # only: [test-feature-branch]