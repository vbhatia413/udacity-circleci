version: 2.1

orbs:
  slack: circleci/slack@4.2.1
commands:
  cleanup-environment:
    description: Cleanup back-end and front-end cloudformation stacks given a workflow ID.
    steps:
      - run:
          name: Cleanup environments
          when: on_fail
          command: |
            # Delete files from bucket
            aws s3 rm s3://udapeople-${CIRCLE_WORKFLOW_ID}/ --recursive
            # Delete front end stack
            aws cloudformation delete-stack --stack-name vikas-udacity-frontend-${CIRCLE_WORKFLOW_ID}
            # Delete back end stack
            aws cloudformation delete-stack --stack-name vikas-udacity-backend-${CIRCLE_WORKFLOW_ID}
            
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys:
            - frontend-build-{{ checksum "package-lock.json" }}
      - run:
          name: Build front-end
          command: |
            # Your code here
            cd frontend
            npm i
            npm run build
      - slack/notify:
          event: fail
          template: basic_fail_1
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build-{{ checksum "package-lock.json" }}

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
             # Your code here
             cd backend
             npm i
             npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys:
            - frontend-build-{{ checksum "package-lock.json" }}
      - run:
          name: front-end test
          command: |
             # Your code here
             cd frontend
             npm run test
                
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end test
          command: |
             # Your code here
             cd backend
             npm run test
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys:
            - frontend-build-{{ checksum "package-lock.json" }}
      - run:
          name: Scan front end dependencies
          command: |
             # Your code here
             cd frontend
             npm audit --audit-level=critical

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Scan backend dependencies
          command: |
             # Your code here
             cd backend
             npm audit --audit-level=critical
  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=vikasudacityproject \
              --stack-name "vikas-udacity-backend-${CIRCLE_WORKFLOW_ID}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID}"  
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=vikasudacityproject \
              --stack-name "vikas-udacity-frontend-${CIRCLE_WORKFLOW_ID}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID}" 
      - run:
          name: Add back-end ip to ansible inventory, use memstash
          command: |
            INSTANCE_IP=$(aws ec2 describe-instances \
            --filters 'Name=tag:Name,Values=backend-*' \
            --query "Reservations[*].Instances[*].PublicIpAddress" \
            --output text)
            echo ${INSTANCE_IP}
            curl -H "Content-Type: text/plain" \
               -H "token: ${CIRCLE_WORKFLOW_ID}" \
               --request PUT \
               --data ${INSTANCE_IP} \
               https://api.memstash.io/values/instance_ip
      # Here's some code to rollback on failure
      - cleanup-environment
  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["f5:cc:de:2b:33:1d:f5:14:4e:bc:b1:fd:d2:35:58:47"]
      - run:
          name: Install dependencies
          command: |
            apk add --no-cache curl
            apk add --no-cache --upgrade bash
            apk add --no-cache --update ansible
            apk add --no-cache openssh-client
      - run:
          name: Configure server
          command: |
            INSTANCE_IP=$(curl -H "token: ${CIRCLE_WORKFLOW_ID}" --request GET https://api.memstash.io/values/instance_ip)
            echo ${INSTANCE_IP}
            cd .circleci/ansible/
            ls
            echo ${INSTANCE_IP} >> ./inventory.txt
            cat ./inventory.txt
            export ANSIBLE_HOST_KEY_CHECKING=false
            ansible-playbook -i ./inventory.txt configure-server.yml
      - cleanup-environment  
  
workflows:
  default:
    jobs:
      - build-frontend:
          context: VikasContext
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [test-backend]
      - scan-frontend:
          requires: [test-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
          #filters:
           # branches:
             # only: [test-feature-branch]